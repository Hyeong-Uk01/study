Unity_study.txt

변수와 자료형편 학습한 내용=====================

int           정수   10자리 정수
long       큰 정수   18자리 정수
float    소수 포함   but 
bool     참과 거짓 
string      문자열     

자료형 최대값 초과시 오버플로우(Overflow)발생하며 잘못된 값 도출

float타입 데이터 뒤에 f를 붙이는 이유는 지금 저장하는 데이터가 float형임을 컴퓨터에게 알리는 용도

|| // or(또는) 기호 둘 중 1개만 '참'이면 '참'
&& // and(그리고) 기호 둘다'참'이면 '참'
! //not(아니다) 기호

3항 연산자
a = b > c ? 1 : 2; //b가 c보다 크다면 1를 넣고 아니면 2를 넣자

?? 연산자
string str3 = str ?? str2;// ? 앞의 값이 null이 아니면 ? 앞의 값을 넣고, null일 경우에는 ? 뒤의 값을 넣어라 

??= 연산자
str ??= str2;//str의 값이 null이면 str2를 넣고, null이 아니면 값을 유지하라

제어문 if & switch편 학습한 내용=====================
switch(식이나 변수)
{
    case 기준1:
        
        break;
    case 기준2:

        break;
        
        ...
        
    case 기준n:

        break;
    
    default: 

        break;
}

제어문 while & for편 학습한 내용=====================
while & do-while의 차이점
    while은 조건이 만족하는 동안(즉, 조건 불일치시 1번도 실행 안함)
    do-while은 조건 상관(=비교) 없이 무조건 1번은 실행 후 조건 비교
    
    ex) while & do-while 문법 차이점
    do
    {
        Deug.Log(i);
    }while (i<10); //꼭 세미콜론 붙이기

break; & continue
    break;//반복문 나가라
    continue;//만나는 순간 다음 동작 무시하고 지금 당장 조건과 비교하라

for문
    for( 초기화; 반복 조건; 반복 명령어)
    {

    }

배열, 다차원 배열, 가변 배열편 학습한 내용=====================
배열
    int[]a = new int[5]; //배열 초기화
    int[]a = new int[5] {   };//배열 초기화 값 할당

    string[] str=new string[5] {   }; //== string[] str= {  ,  ,  ,  , };

다차원 배열
    int[ , ] a= new int[5, 4];//가로로 4개 세로 5개을 가진 2차원 배열 생성

반복문 사용할때 초기화 변수 순서 I J K L M N

가변 배열
    //배열 안에 배열
    int[][] a = new int[5][];//각 배열안에 배열이 있기 땜에 두번째 []은 값 할당 X
    ex)int [] [] a=new int [3][];
        a[0] = new int[3] {0, 1, 2};
        a[1] = new int[5] {4, 6, 7, 5, 1};
        a[2] = new int[4] {3, 7, 9, 10};

        
컬렉션, List, Dictionary편 학습한 내용=====================
컬렉션

    List<자료형> 변수명;//저장할 자료형의 변수명을 선언하라
    List<자료형> 변수명=new List<자료형>(숫자)//리스트를 생성하라 

    변수명.Add( );//변수명 리스트에 ( )의 내용을 추가하라
    변수명.Add( Index , );//변수명 리스트 해당 Index에 ( )의 내용을 추가하라

    Debug.Log(변수명[Index])//해당 값 출력하라

    변수명.Remove(Index);//해당 Index에 값을 제거하라
    변수명.Remove( );//리스트 내에 있는 ( )안의 값을 제거(삭제)하라

    변수명.Count;//변수명 리스트 안의 들어있는 원소들을 count하라
                 //Count는 ( )를 사용하지 않는다. 

    변수명.Contains( );// ( )안의 내용이 변수명 리스트안에 존재하는가?

    변수명.IndexOf( );// ( )안의 내용이 몇 번 index에 있는가?
    변수명.Clear( );// 변수명 리스트안에 들어있는 리스트 값을 지워라 

Dictionary

    Dictionary//Key값을 저장해서 Value 값을 저장하는 컬렉션
    Dictionary< Key값 자료형, Value값 자료형 > 변수명 = new Dictionary< Key값 자료형, Value값 자료형 > ( );

    변수명.Add( Key값 , Value값 );

    Debug.Log(변수명[Key값])//Key값에 해당하는 Value값 출력하라
                            //Dictionary에서는 Index 비슷한 역할로 Key값
                            //따라서 Key값이 같은 2개 이상의 Value값아 존재 불가
    
    Debug.long(변수명.ContainsKey( ));//( )안의 Key값을 가진 변수명 Dictionary안에 존재하는가?
    Debug.long(변수명.ContainsValue( ));//( )안의 Value값을 가진 변수명 Dictionary안에 존재하는가?

    변수명.Remove( Key값 );//( )안의 Key값을 가진 원소를 삭제하라
    변수명.Clear();//