Cpp_study.txt

컴파일편 학습한 내용=============

소스코드→빌드, 컴파일→실행 파일

컴파일 또는 빌드?(전처리→컴파일→어셈블리→링킹)과정

컴파일이란? 프로그래밍 언어로 작성된 소스 코드를 기계어(어셈블리어)로 변환하는 작업


cout, 변수편 학습한 내용=============
'\n'과 << std::endl; //같은 의미

int a; //정수형 변수 a 선언 
int a = 5; //도일 이름의 변수는 존재하면 안됨

배우는 단계임으로 디버깅할때, F5 보단
F10 프로시저 단위를 사용하여 직접 한 줄씩 보는 습관들이기  
'조사식'(디버그 > 창 > 조사식)을 활용하여 직접 변수 값 확인하는 습관들이기


cin, if else편 학습한 내용=============

std::cout <<
std::cin  >> 변수; //꺽쇠 확인 잘하기 + 입력값을 받아서 넣을 변수가 필요하다.

// 변수 값 증가
(a = a + 5;) == (a += 5;)
//+=,-=,*=,/= 

//후위 연산자 & 전위 연산자
a++;//해당 줄 종료 후 a의 값 증가(=후위 연산자)
++a;//먼저 a의 값 증가 후 해당 줄 실행(=전위 연산자)

//주석
/*
주석
처리
*/


//조건식 >, <, >=, >=, !=

if문의 다중비교, for편 학습한 내용=============
if문의 다중비교 (if 2개 쓰는 방식 & 논리 연산자 활용하여 비교 방식)
    if(조건1)//지금까지 배운 내용의 한계
    {
        if(조건2)
        {
            .......if(조건n)
        }
    }
    
    새로 배울 방식(&&, ||연산자를 활용) 
    && //AND연산자 두 조건 모두 '참' 이면 '참'
    || //OR 연산자 두 조건 중 한개 이상이 '참' 이면 '참'

    ex)if((x <= 3 && x <= 6) || (x >= 7 && x <= 12))
    {

    }

for문    
    for( 초기값; 조건식; 증감식)
    {
        
    }


배열편 학습한 내용=============
배열
    int arr[4] = {1,2,3,4};//초기화

인덱스//시작 0 번째 ~ 끝 n-1 번째    

배열+for문
    for(int i=0;i<7;i++)
    {
        vect[i] =7;
    }


변수활용, char변수, 함수, F11편 학습한 내용=============
변수활용
    메모리를 더 쓰면(추가로 변수 선언) 연산(및 가독성)이 쉬워진다. 

char변수
    char = ' ' 따옴표

함수
    ex)void 함수이름(전달) //반환값 함수이름(전달){ }

F11 // 함수안의 코드 1줄 씩 실행할 때 단축키

지역변수//해당 함수 안에 만들어진 변수

전역변수//함수 밖에 생성된 변수//남발하는 경우 메모리 소모 심함 but 공부할 때, 코테는 상관이 없으나  실무에선 꼭 필요한 경우에만 사용해야함

char 변수, 2중 for문편 학습한 내용=============
형변환
    ex) char ch='a';
        int A = (int)ch;

<=(~부터) && >=(~까지)

아스키 코드
    문자가 아닌 숫자 따라서 연산 가능

    ex) 'A' + 32를 더한 값은 'a' 그 반대 또한 - 32

2중 for()
    for(int i=0;i<3;i++)       //2번, 그 과정을 3번 반복하라
        for(int j=0;j<2;j++)  //1번, 2회 반복하라
        "hi"                 //"hi"를


else if, %연산자, counting, 2차원배열편 학습한 내용============= 
else if연산자
    ex1)if()                 ex2)if()
        if()                     else if() 
        if()                     else if() 
    ex1)모든 if문 전부 체크하는 반면에 ex2)는 if문이 참이면 else if는 체크 안함

%나머지 연산자
    활용 ex)홀짝, 배수

counting//배열에 있어서 특정 조건의 갯수 셀때
    ex)int arr[5]={1,2,3,4,5};
    int count=0;
    for(int i=0;i<5;i++)
    {
        if(arr[i] % 2 == 0)
        {
            count++;
        }
    }

ctrl + F10
or F9와 F5

2차원 배열
    ex)5(x)개짜리 배열 3(y)줄 생성 -> arr[3][5]


break문, while문편 학습한 내용============= 
break문
    반복문 빠져나오는 명령어

while문//조건이 '참'일 동안만 반복
       //특정 조건이 명시되지 않는 경우에 주로 사용
       //Why? while문은 for문에 비해 가독성이 떨어짐으로 조건식이 존재한다면 되도록 for문 사용하자
    
    ex) for(int i=0;i<5;i++){  } //for문 
        
        int i=0                 //while문
        while(i<5)
        { 
            i++; 
        }


Swap 구조체, 전달인자, Call by Value편 학습한 내용============= 

Swap//2개 변수 서로 교환하는 작업
    int a=10,b=5,c=0;
    
    c=a;//c=10;
    a=b;//a=5;
    b=c;//b=10;

구조체//변수들을 묶은 형태로 그룹화할 때 사용
      //자료구조 알고리즘 해결하는 데 있어 많이 사용하게 됨
    struct 구조체명ABC
    {
        int num;
        char ch;
    }

    구조체명ABC abc;
    abc.num =100;
    abc.ch='A';


counting응용
    counting을 하면서 갯수를 세는 용도와 더불어, if문을 이용하여 데이터가 있는지 없는 지 체크하는 용도로도 가능


전달 인자
    //void Test(int N, int n)//(  )안이 전달인자


return, 2차원 배열편 학습한 내용=============
return //참조한 함수에 소유권(값)을 넘겨라
       //break;처럼 밑에 적힌 코드는 무시된다.

2차원 배열
    {
        7,4,1
        8,5,2
        9,6,3
    }   
   
   위의 규칙(i,j)에서 j가 증가하는 동안 i이 3번 반복함

   즉, for(int j=2; j>=0 j--)
        {
            for(int i=0; i<3; i++)
            {
                
            }
        }


문자와 문자열, 문자열의 길이, 2중 for문 활용편 학습한 내용=============
문자열 배열//실제 문자열 갯수보다 +1한 값으로 초기화하기('\0'은 자동생성)
    char str[5] ="abcd"//육안으로는 abcd밖에 없지만, 문자열 배열은 기본적으로 끝에 '\0'(=null문자)를 포함한다 따라서 실제적으론 char str[5]="abc\0";

문자열 출력 
            cout<<str;//abcd
            cout<<&str[0];//abcd


int arr[3][3]={};
int t=1;
for(int y=0;y<3;y++)
{
    for(int x=2-y;x<=2;x--)
    {
        arr[y][x]=t;
        t++;
    }
}

>>결과
{
    001
    023
    456
}


